
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_03_connectivity_plot_probabilistic_atlas_extraction.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_connectivity_plot_probabilistic_atlas_extraction.py:


Extracting signals of a probabilistic atlas of functional regions
=================================================================

This example extracts the signal on regions defined via a probabilistic
atlas, to construct a functional connectome.

We use the `MSDL atlas
<https://team.inria.fr/parietal/18-2/spatial_patterns/spatial-patterns-in-resting-state/>`_
of functional regions in movie-watching.

The key to extract signals is to use the
:class:`nilearn.maskers.NiftiMapsMasker` that can transform nifti
objects to time series using a probabilistic atlas.

As the MSDL atlas comes with (x, y, z) :term:`MNI` coordinates for the
different regions, we can visualize the matrix as a graph of
interaction in a brain. To avoid having too dense a graph, we represent
only the 20% edges with the highest values.

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 25-27

Retrieve the atlas and the data
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 27-40

.. code-block:: default

    from nilearn import datasets
    atlas = datasets.fetch_atlas_msdl()
    # Loading atlas image stored in 'maps'
    atlas_filename = atlas['maps']
    # Loading atlas data stored in 'labels'
    labels = atlas['labels']

    # Load the functional datasets
    data = datasets.fetch_development_fmri(n_subjects=1)

    print('First subject resting-state nifti image (4D) is located at: %s' %
          data.func[0])


.. GENERATED FROM PYTHON SOURCE LINES 41-43

Extract the time series
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: default

    from nilearn.maskers import NiftiMapsMasker
    masker = NiftiMapsMasker(maps_img=atlas_filename, standardize=True,
                             memory='nilearn_cache', verbose=5)
    masker.fit(data.func[0])
    time_series = masker.transform(data.func[0],
                                   confounds=data.confounds)


.. GENERATED FROM PYTHON SOURCE LINES 51-56

We can generate an HTML report and visualize the components of the
:class:`~nilearn.maskers.NiftiMapsMasker`.
You can pass the indices of the spatial maps you want to include in the
report in the order you want them to appear.
Here, we only include maps 2, 6, 7, 16, and 21 in the report:

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    report = masker.generate_report(displayed_maps=[2, 6, 7, 16, 21])
    report


.. GENERATED FROM PYTHON SOURCE LINES 60-62

`time_series` is now a 2D matrix, of shape (number of time points x
number of regions)

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    print(time_series.shape)


.. GENERATED FROM PYTHON SOURCE LINES 65-67

Build and display a correlation matrix
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-78

.. code-block:: default

    from nilearn.connectome import ConnectivityMeasure
    correlation_measure = ConnectivityMeasure(kind='correlation')
    correlation_matrix = correlation_measure.fit_transform([time_series])[0]

    # Display the correlation matrix
    import numpy as np
    from nilearn import plotting
    # Mask out the major diagonal
    np.fill_diagonal(correlation_matrix, 0)
    plotting.plot_matrix(correlation_matrix, labels=labels, colorbar=True,
                         vmax=0.8, vmin=-0.8)

.. GENERATED FROM PYTHON SOURCE LINES 79-81

And now display the corresponding graph
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-91

.. code-block:: default

    from nilearn import plotting
    coords = atlas.region_coords

    # We threshold to keep only the 20% of edges with the highest value
    # because the graph is very dense
    plotting.plot_connectome(correlation_matrix, coords,
                             edge_threshold="80%", colorbar=True)

    plotting.show()


.. GENERATED FROM PYTHON SOURCE LINES 92-98

3D visualization in a web browser
---------------------------------
An alternative to :func:`nilearn.plotting.plot_connectome` is to use
:func:`nilearn.plotting.view_connectome` that gives more interactive
visualizations in a web browser. See :ref:`interactive-connectome-plotting`
for more details.

.. GENERATED FROM PYTHON SOURCE LINES 98-106

.. code-block:: default



    view = plotting.view_connectome(correlation_matrix, coords, edge_threshold='80%')

    # In a Jupyter notebook, if ``view`` is the output of a cell, it will
    # be displayed below the cell
    view


.. GENERATED FROM PYTHON SOURCE LINES 107-110

.. code-block:: default


    # uncomment this to open the plot in a web browser:
    # view.open_in_browser()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_03_connectivity_plot_probabilistic_atlas_extraction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_probabilistic_atlas_extraction.py <plot_probabilistic_atlas_extraction.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_probabilistic_atlas_extraction.ipynb <plot_probabilistic_atlas_extraction.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
