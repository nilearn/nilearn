
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_connectivity/plot_multi_subject_connectome.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_03_connectivity_plot_multi_subject_connectome.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_connectivity_plot_multi_subject_connectome.py:


Group Sparse inverse covariance for multi-subject connectome
=============================================================

This example shows how to estimate a connectome on a group of subjects
using the group sparse inverse covariance estimate.

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 11-38

.. code-block:: default

    import numpy as np

    from nilearn import plotting

    n_subjects = 4  # subjects to consider for group-sparse covariance (max: 40)


    def plot_matrices(cov, prec, title, labels):
        """Plot covariance and precision matrices, for a given processing. """

        prec = prec.copy()  # avoid side effects

        # Put zeros on the diagonal, for graph clarity.
        size = prec.shape[0]
        prec[list(range(size)), list(range(size))] = 0
        span = max(abs(prec.min()), abs(prec.max()))

        # Display covariance matrix
        plotting.plot_matrix(cov, cmap=plotting.cm.bwr,
                             vmin=-1, vmax=1, title="%s / covariance" % title,
                             labels=labels)
        # Display precision matrix
        plotting.plot_matrix(prec, cmap=plotting.cm.bwr,
                             vmin=-span, vmax=span, title="%s / precision" % title,
                             labels=labels)



.. GENERATED FROM PYTHON SOURCE LINES 39-41

Fetching datasets
------------------

.. GENERATED FROM PYTHON SOURCE LINES 41-50

.. code-block:: default

    from nilearn import datasets
    msdl_atlas_dataset = datasets.fetch_atlas_msdl()
    rest_dataset = datasets.fetch_development_fmri(n_subjects=n_subjects)

    # print basic information on the dataset
    print('First subject functional nifti image (4D) is at: %s' %
          rest_dataset.func[0])  # 4D data



.. GENERATED FROM PYTHON SOURCE LINES 51-53

Extracting region signals
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-78

.. code-block:: default

    from nilearn.maskers import NiftiMapsMasker

    # A "memory" to avoid recomputation
    from joblib import Memory
    mem = Memory('nilearn_cache')

    masker = NiftiMapsMasker(
        msdl_atlas_dataset.maps, resampling_target="maps", detrend=True,
        high_variance_confounds=True, low_pass=None, high_pass=0.01,
        t_r=2, standardize=True, memory='nilearn_cache', memory_level=1,
        verbose=2)
    masker.fit()

    subject_time_series = []
    func_filenames = rest_dataset.func
    confound_filenames = rest_dataset.confounds
    for func_filename, confound_filename in zip(func_filenames,
                                                confound_filenames):
        print("Processing file %s" % func_filename)

        region_ts = masker.transform(func_filename,
                                     confounds=confound_filename)
        subject_time_series.append(region_ts)



.. GENERATED FROM PYTHON SOURCE LINES 79-81

Computing group-sparse precision matrices
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-95

.. code-block:: default

    from nilearn.connectome import GroupSparseCovarianceCV
    gsc = GroupSparseCovarianceCV(verbose=2)
    gsc.fit(subject_time_series)

    try:
        from sklearn.covariance import GraphicalLassoCV
    except ImportError:
        # for Scitkit-Learn < v0.20.0
        from sklearn.covariance import GraphLassoCV as GraphicalLassoCV

    gl = GraphicalLassoCV(verbose=2)
    gl.fit(np.concatenate(subject_time_series))



.. GENERATED FROM PYTHON SOURCE LINES 96-98

Displaying results
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 98-123

.. code-block:: default

    atlas_img = msdl_atlas_dataset.maps
    atlas_region_coords = plotting.find_probabilistic_atlas_cut_coords(atlas_img)
    labels = msdl_atlas_dataset.labels

    plotting.plot_connectome(gl.covariance_,
                             atlas_region_coords, edge_threshold='90%',
                             title="Covariance",
                             display_mode="lzr")
    plotting.plot_connectome(-gl.precision_, atlas_region_coords,
                             edge_threshold='90%',
                             title="Sparse inverse covariance (GraphicalLasso)",
                             display_mode="lzr",
                             edge_vmax=.5, edge_vmin=-.5)
    plot_matrices(gl.covariance_, gl.precision_, "GraphicalLasso", labels)

    title = "GroupSparseCovariance"
    plotting.plot_connectome(-gsc.precisions_[..., 0],
                             atlas_region_coords, edge_threshold='90%',
                             title=title,
                             display_mode="lzr",
                             edge_vmax=.5, edge_vmin=-.5)
    plot_matrices(gsc.covariances_[..., 0],
                  gsc.precisions_[..., 0], title, labels)

    plotting.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_03_connectivity_plot_multi_subject_connectome.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/03_connectivity/plot_multi_subject_connectome.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_multi_subject_connectome.py <plot_multi_subject_connectome.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_multi_subject_connectome.ipynb <plot_multi_subject_connectome.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
