
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_tutorials/plot_single_subject_single_run.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_00_tutorials_plot_single_subject_single_run.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_tutorials_plot_single_subject_single_run.py:

Intro to GLM Analysis: a single-session, single-subject fMRI dataset
=====================================================================

In this tutorial, we use a General Linear Model (:term:`GLM`) to compare the
:term:`fMRI` signal during periods of auditory stimulation versus periods of rest.

The analyse described here is performed in the native space, directly on the
original :term:`EPI` scans without any spatial or temporal preprocessing.
(More sensitive results would likely be obtained on the corrected,
spatially normalized and smoothed images).

The data
---------

The dataset comes from an experiment conducted at the FIL by Geraint Rees
under the direction of Karl Friston. It is provided by FIL methods
group which develops the SPM software.

According to SPM documentation, 96 scans were acquired (repetition time
:term:`TR` = 7s) in one session. The paradigm consisted of alternating periods
of stimulation and rest, lasting 42s each (that is, for 6 scans). The session
started with a rest block.  Auditory stimulation consisted of bi-syllabic words
presented binaurally at a rate of 60 per minute. The functional data starts at scan
number 4, that is the image file ``fM00223_004``.

The whole brain :term:`BOLD`/:term:`EPI` images were acquired on a 2T Siemens
MAGNETOM Vision system. Each scan consisted of 64 contiguous slices (64x64x64
3mm x 3mm x 3mm :term:`voxels<voxel>`). Acquisition of one scan took 6.05s, with the
scan to scan repeat time (:term:`TR`) set arbitrarily to 7s.

.. GENERATED FROM PYTHON SOURCE LINES 33-41

Retrieving the data
-------------------

.. note:: In this tutorial, we load the data using a data downloading
          function. To input your own data, you will need to provide
          a list of paths to your own files in the ``subject_data`` variable.
          These should abide to the Brain Imaging Data Structure (:term:`BIDS`)
          organization.

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: default


    from nilearn.datasets import fetch_spm_auditory
    subject_data = fetch_spm_auditory()
    subject_data.func  # print the list of names of functional images


.. GENERATED FROM PYTHON SOURCE LINES 47-48

We can display the first functional image and the subject's anatomy:

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default

    from nilearn.plotting import plot_stat_map, plot_anat, plot_img
    plot_img(subject_data.func[0], colorbar=True, cbar_tick_format="%i")
    plot_anat(subject_data.anat, colorbar=True, cbar_tick_format="%i")


.. GENERATED FROM PYTHON SOURCE LINES 53-56

Next, we concatenate all the 3D :term:`EPI` image into a single 4D image,
then we average them in order to create a background
image that will be used to display the activations:

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default


    from nilearn.image import concat_imgs, mean_img
    fmri_img = concat_imgs(subject_data.func)
    mean_img = mean_img(fmri_img)


.. GENERATED FROM PYTHON SOURCE LINES 62-69

Specifying the experimental paradigm
------------------------------------

We must now provide a description of the experiment, that is, define the
timing of the auditory stimulation and rest periods. This is typically
provided in an events.tsv file. The path of this file is
provided in the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: default

    import pandas as pd
    events = pd.read_table(subject_data['events'])
    events


.. GENERATED FROM PYTHON SOURCE LINES 74-78

Performing the GLM analysis
---------------------------

It is now time to create and estimate a ``FirstLevelModel`` object, that will generate the *design matrix* using the  information provided by the ``events`` object.

.. GENERATED FROM PYTHON SOURCE LINES 78-81

.. code-block:: default


    from nilearn.glm.first_level import FirstLevelModel


.. GENERATED FROM PYTHON SOURCE LINES 82-90

Parameters of the first-level model

* t_r=7(s) is the time of repetition of acquisitions
* noise_model='ar1' specifies the noise covariance model: a lag-1 dependence
* standardize=False means that we do not want to rescale the time series to mean 0, variance 1
* hrf_model='spm' means that we rely on the SPM "canonical hrf" model (without time or dispersion derivatives)
* drift_model='cosine' means that we model the signal drifts as slow oscillating time functions
* high_pass=0.01(Hz) defines the cutoff frequency (inverse of the time period).

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default

    fmri_glm = FirstLevelModel(t_r=7,
                               noise_model='ar1',
                               standardize=False,
                               hrf_model='spm',
                               drift_model='cosine',
                               high_pass=.01)


.. GENERATED FROM PYTHON SOURCE LINES 98-99

Now that we have specified the model, we can run it on the :term:`fMRI` image

.. GENERATED FROM PYTHON SOURCE LINES 99-101

.. code-block:: default

    fmri_glm = fmri_glm.fit(fmri_img, events)


.. GENERATED FROM PYTHON SOURCE LINES 102-104

One can inspect the design matrix (rows represent time, and
columns contain the predictors).

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: default

    design_matrix = fmri_glm.design_matrices_[0]


.. GENERATED FROM PYTHON SOURCE LINES 107-109

Formally, we have taken the first design matrix, because the model is
implictily meant to for multiple runs.

.. GENERATED FROM PYTHON SOURCE LINES 109-114

.. code-block:: default

    from nilearn.plotting import plot_design_matrix
    plot_design_matrix(design_matrix)
    import matplotlib.pyplot as plt
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 115-117

Save the design matrix image to disk
first create a directory where you want to write the images

.. GENERATED FROM PYTHON SOURCE LINES 117-127

.. code-block:: default


    import os
    outdir = 'results'
    if not os.path.exists(outdir):
        os.mkdir(outdir)

    from os.path import join
    plot_design_matrix(
        design_matrix, output_file=join(outdir, 'design_matrix.png'))


.. GENERATED FROM PYTHON SOURCE LINES 128-131

The first column contains the expected response profile of regions which are
sensitive to the auditory stimulation.
Let's plot this first column

.. GENERATED FROM PYTHON SOURCE LINES 131-137

.. code-block:: default


    plt.plot(design_matrix['active'])
    plt.xlabel('scan')
    plt.title('Expected Auditory Response')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 138-149

Detecting voxels with significant effects
-----------------------------------------

To access the estimated coefficients (Betas of the :term:`GLM` model), we
created :term:`contrast` with a single '1' in each of the columns: The role
of the :term:`contrast` is to select some columns of the model --and
potentially weight them-- to study the associated statistics. So in
a nutshell, a contrast is a weighted combination of the estimated
effects.  Here we can define canonical contrasts that just consider
the two effects in isolation ---let's call them "conditions"---
then a :term:`contrast` that makes the difference between these conditions.

.. GENERATED FROM PYTHON SOURCE LINES 149-158

.. code-block:: default


    from numpy import array
    conditions = {
        'active': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0.]),
        'rest':   array([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0.]),
    }


.. GENERATED FROM PYTHON SOURCE LINES 159-161

We can then compare the two conditions 'active' and 'rest' by
defining the corresponding :term:`contrast`:

.. GENERATED FROM PYTHON SOURCE LINES 161-164

.. code-block:: default


    active_minus_rest = conditions['active'] - conditions['rest']


.. GENERATED FROM PYTHON SOURCE LINES 165-167

Let's look at it: plot the coefficients of the :term:`contrast`, indexed by
the names of the columns of the design matrix.

.. GENERATED FROM PYTHON SOURCE LINES 167-171

.. code-block:: default


    from nilearn.plotting import plot_contrast_matrix
    plot_contrast_matrix(active_minus_rest, design_matrix=design_matrix)


.. GENERATED FROM PYTHON SOURCE LINES 172-175

Below, we compute the :term:`'estimated effect'<Parameter Estimate>`.
It is in :term:`BOLD` signal unit, but has no statistical guarantees,
because it does not take into account the associated variance.

.. GENERATED FROM PYTHON SOURCE LINES 175-179

.. code-block:: default


    eff_map = fmri_glm.compute_contrast(active_minus_rest,
                                        output_type='effect_size')


.. GENERATED FROM PYTHON SOURCE LINES 180-184

In order to get statistical significance, we form a t-statistic, and
directly convert it into z-scale. The z-scale means that the values
are scaled to match a standard Gaussian distribution (mean=0,
variance=1), across voxels, if there were no effects in the data.

.. GENERATED FROM PYTHON SOURCE LINES 184-188

.. code-block:: default


    z_map = fmri_glm.compute_contrast(active_minus_rest,
                                      output_type='z_score')


.. GENERATED FROM PYTHON SOURCE LINES 189-197

Plot thresholded z scores map
------------------------------

We display it on top of the average
functional image of the series (could be the anatomical image of the
subject).  We use arbitrarily a threshold of 3.0 in z-scale. We'll
see later how to use corrected thresholds. We will show 3
axial views, with display_mode='z' and cut_coords=3.

.. GENERATED FROM PYTHON SOURCE LINES 197-203

.. code-block:: default


    plot_stat_map(z_map, bg_img=mean_img, threshold=3.0,
                  display_mode='z', cut_coords=3, black_bg=True,
                  title='Active minus Rest (Z>3)')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 204-211

Statistical significance testing. One should worry about the
statistical validity of the procedure: here we used an arbitrary
threshold of 3.0 but the threshold should provide some guarantees on
the risk of false detections (aka type-1 errors in statistics).
One suggestion is to control the false positive rate (:term:`fpr<FPR correction>`, denoted by
alpha) at a certain level, e.g. 0.001: this means that there is 0.1% chance
of declaring an inactive :term:`voxel`, active.

.. GENERATED FROM PYTHON SOURCE LINES 211-220

.. code-block:: default


    from nilearn.glm import threshold_stats_img
    _, threshold = threshold_stats_img(z_map, alpha=.001, height_control='fpr')
    print('Uncorrected p<0.001 threshold: %.3f' % threshold)
    plot_stat_map(z_map, bg_img=mean_img, threshold=threshold,
                  display_mode='z', cut_coords=3, black_bg=True,
                  title='Active minus Rest (p<0.001)')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 221-226

The problem is that with this you expect 0.001 * n_voxels to show up
while they're not active --- tens to hundreds of voxels. A more
conservative solution is to control the family wise error rate,
i.e. the probability of making only one false detection, say at
5%. For that we use the so-called Bonferroni correction.

.. GENERATED FROM PYTHON SOURCE LINES 226-235

.. code-block:: default


    _, threshold = threshold_stats_img(
        z_map, alpha=.05, height_control='bonferroni')
    print('Bonferroni-corrected, p<0.05 threshold: %.3f' % threshold)
    plot_stat_map(z_map, bg_img=mean_img, threshold=threshold,
                  display_mode='z', cut_coords=3, black_bg=True,
                  title='Active minus Rest (p<0.05, corrected)')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 236-240

This is quite conservative indeed!  A popular alternative is to
control the expected proportion of
false discoveries among detections. This is called the False
discovery rate.

.. GENERATED FROM PYTHON SOURCE LINES 240-248

.. code-block:: default


    _, threshold = threshold_stats_img(z_map, alpha=.05, height_control='fdr')
    print('False Discovery rate = 0.05 threshold: %.3f' % threshold)
    plot_stat_map(z_map, bg_img=mean_img, threshold=threshold,
                  display_mode='z', cut_coords=3, black_bg=True,
                  title='Active minus Rest (fdr=0.05)')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 249-254

Finally people like to discard isolated voxels (aka "small
clusters") from these images. It is possible to generate a
thresholded map with small clusters removed by providing a
cluster_threshold argument. Here clusters smaller than 10 voxels
will be discarded.

.. GENERATED FROM PYTHON SOURCE LINES 254-264

.. code-block:: default


    clean_map, threshold = threshold_stats_img(
        z_map, alpha=.05, height_control='fdr', cluster_threshold=10)
    plot_stat_map(clean_map, bg_img=mean_img, threshold=threshold,
                  display_mode='z', cut_coords=3, black_bg=True,
                  title='Active minus Rest (fdr=0.05), clusters > 10 voxels')
    plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 265-266

We can save the effect and zscore maps to the disk.

.. GENERATED FROM PYTHON SOURCE LINES 266-269

.. code-block:: default

    z_map.to_filename(join(outdir, 'active_vs_rest_z_map.nii.gz'))
    eff_map.to_filename(join(outdir, 'active_vs_rest_eff_map.nii.gz'))


.. GENERATED FROM PYTHON SOURCE LINES 270-271

We can furthermore extract and report the found positions in a table.

.. GENERATED FROM PYTHON SOURCE LINES 271-277

.. code-block:: default


    from nilearn.reporting import get_clusters_table
    table = get_clusters_table(z_map, stat_threshold=threshold,
                               cluster_threshold=20)
    table


.. GENERATED FROM PYTHON SOURCE LINES 278-279

This table can be saved for future use.

.. GENERATED FROM PYTHON SOURCE LINES 279-282

.. code-block:: default


    table.to_csv(join(outdir, 'table.csv'))


.. GENERATED FROM PYTHON SOURCE LINES 283-292

Performing an F-test
---------------------

"active vs rest" is a typical t test: condition versus
baseline. Another popular type of test is an F test in which one
seeks whether a certain combination of conditions (possibly two-,
three- or higher-dimensional) explains a significant proportion of
the signal.  Here one might for instance test which voxels are well
explained by the combination of the active and rest condition.

.. GENERATED FROM PYTHON SOURCE LINES 294-297

Specify the contrast and compute the corresponding map. Actually, the
contrast specification is done exactly the same way as for t-
contrasts.

.. GENERATED FROM PYTHON SOURCE LINES 297-306

.. code-block:: default


    import numpy as np
    effects_of_interest = np.vstack((conditions['active'], conditions['rest']))
    plot_contrast_matrix(effects_of_interest, design_matrix)
    plt.show()

    z_map = fmri_glm.compute_contrast(effects_of_interest,
                                      output_type='z_score')


.. GENERATED FROM PYTHON SOURCE LINES 307-309

Note that the statistic has been converted to a z-variable, which
makes it easier to represent it.

.. GENERATED FROM PYTHON SOURCE LINES 309-317

.. code-block:: default


    clean_map, threshold = threshold_stats_img(
        z_map, alpha=.05, height_control='fdr', cluster_threshold=10)
    plot_stat_map(clean_map, bg_img=mean_img, threshold=threshold,
                  display_mode='z', cut_coords=3, black_bg=True,
                  title='Effects of interest (fdr=0.05), clusters > 10 voxels')
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 318-319

Oops, there is a lot of non-neural signal in there (ventricles, arteries)...


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_00_tutorials_plot_single_subject_single_run.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/00_tutorials/plot_single_subject_single_run.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_single_subject_single_run.py <plot_single_subject_single_run.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_single_subject_single_run.ipynb <plot_single_subject_single_run.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
