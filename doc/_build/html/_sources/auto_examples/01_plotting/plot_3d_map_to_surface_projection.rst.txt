
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_plotting/plot_3d_map_to_surface_projection.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_01_plotting_plot_3d_map_to_surface_projection.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_plotting_plot_3d_map_to_surface_projection.py:


Making a surface plot of a 3D statistical map
=============================================

In this example, we will project a 3D statistical map onto a cortical mesh
using :func:`~nilearn.surface.vol_to_surf`, display a surface plot of the
projected map using :func:`~nilearn.plotting.plot_surf_stat_map` with
different plotting engines, and add contours of regions of interest using
:func:`~nilearn.plotting.plot_surf_contours`.

.. GENERATED FROM PYTHON SOURCE LINES 14-16

Get a statistical map
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 16-23

.. code-block:: default


    from nilearn import datasets

    motor_images = datasets.fetch_neurovault_motor_task()
    stat_img = motor_images.images[0]



.. GENERATED FROM PYTHON SOURCE LINES 24-26

Get a cortical mesh
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default


    fsaverage = datasets.fetch_surf_fsaverage()


.. GENERATED FROM PYTHON SOURCE LINES 30-32

Sample the 3D data around each node of the mesh
-----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 32-37

.. code-block:: default


    from nilearn import surface

    texture = surface.vol_to_surf(stat_img, fsaverage.pial_right)


.. GENERATED FROM PYTHON SOURCE LINES 38-44

Plot the result
---------------

You can visualize the texture on the surface using the function
:func:`~nilearn.plotting.plot_surf_stat_map` which uses ``matplotlib``
as the default plotting engine:

.. GENERATED FROM PYTHON SOURCE LINES 44-54

.. code-block:: default


    from nilearn import plotting

    fig = plotting.plot_surf_stat_map(
        fsaverage.infl_right, texture, hemi='right',
        title='Surface right hemisphere', colorbar=True,
        threshold=1., bg_map=fsaverage.sulc_right
    )
    fig.show()


.. GENERATED FROM PYTHON SOURCE LINES 55-62

Interactive plotting with Plotly
--------------------------------

If you have a recent version of Nilearn (>=0.8.2), and if you have
``plotly`` installed, you can easily configure
:func:`~nilearn.plotting.plot_surf_stat_map` to use ``plotly`` instead
of ``matplotlib``:

.. GENERATED FROM PYTHON SOURCE LINES 62-80

.. code-block:: default


    engine = 'plotly'
    # If plotly is not installed, use matplotlib
    try:
        import plotly.graph_objects as go  # noqa: F401
    except ImportError:
        engine = 'matplotlib'

    print(f"Using plotting engine {engine}.")

    fig = plotting.plot_surf_stat_map(
        fsaverage.infl_right, texture, hemi='right',
        title='Surface right hemisphere', colorbar=True,
        threshold=1., bg_map=fsaverage.sulc_right,
        engine=engine  # Specify the plotting engine here
    )
    fig.show()  # Display the figure as with matplotlib figures


.. GENERATED FROM PYTHON SOURCE LINES 81-88

When using ``matplolib`` as the plotting engine, a standard
:class:`matplotlib.figure.Figure` is returned. With ``plotly`` as the
plotting engine, a custom
:class:`~nilearn.plotting.displays.PlotlySurfaceFigure` is returned which
provides a similar API to the :class:`~matplotlib.figure.Figure`.
For example, you can save a static version of the figure to file (this
option requires to have ``kaleido`` installed):

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default


    # Save the figure as we would do with a matplotlib figure
    # Uncomment the following line to save the previous figure to file
    # fig.savefig("right_hemisphere.png")


.. GENERATED FROM PYTHON SOURCE LINES 94-96

Plot 3D image for comparison
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 96-103

.. code-block:: default


    plotting.plot_glass_brain(stat_img, display_mode='r', plot_abs=False,
                              title='Glass brain', threshold=2.)

    plotting.plot_stat_map(stat_img, display_mode='x', threshold=1.,
                           cut_coords=range(0, 51, 10), title='Slices')


.. GENERATED FROM PYTHON SOURCE LINES 104-106

Use an atlas and choose regions to outline
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 106-122

.. code-block:: default


    import numpy as np

    destrieux_atlas = datasets.fetch_atlas_surf_destrieux()
    parcellation = destrieux_atlas['map_right']

    # these are the regions we want to outline
    regions_dict = {b'G_postcentral': 'Postcentral gyrus',
                    b'G_precentral': 'Precentral gyrus'}

    # get indices in atlas for these labels
    regions_indices = [np.where(np.array(destrieux_atlas['labels']) == region)[0][0]
                       for region in regions_dict]

    labels = list(regions_dict.values())


.. GENERATED FROM PYTHON SOURCE LINES 123-125

Display outlines of the regions of interest on top of a statistical map
-----------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 125-136

.. code-block:: default


    figure = plotting.plot_surf_stat_map(fsaverage.infl_right, texture, hemi='right',
                                         title='Surface right hemisphere',
                                         colorbar=True, threshold=1.,
                                         bg_map=fsaverage.sulc_right)

    plotting.plot_surf_contours(fsaverage.infl_right, parcellation, labels=labels,
                                levels=regions_indices, figure=figure, legend=True,
                                colors=['g', 'k'])
    plotting.show()


.. GENERATED FROM PYTHON SOURCE LINES 137-144

Plot with higher-resolution mesh
--------------------------------

:func:`~nilearn.datasets.fetch_surf_fsaverage` takes a ``mesh`` argument
which specifies whether to fetch the low-resolution ``fsaverage5`` mesh, or
the high-resolution fsaverage mesh. Using ``mesh="fsaverage"`` will result
in more memory usage and computation time, but finer visualizations.

.. GENERATED FROM PYTHON SOURCE LINES 144-154

.. code-block:: default


    big_fsaverage = datasets.fetch_surf_fsaverage('fsaverage')
    big_texture = surface.vol_to_surf(stat_img, big_fsaverage.pial_right)

    plotting.plot_surf_stat_map(big_fsaverage.infl_right,
                                big_texture, hemi='right', colorbar=True,
                                title='Surface right hemisphere: fine mesh',
                                threshold=1., bg_map=big_fsaverage.sulc_right)



.. GENERATED FROM PYTHON SOURCE LINES 155-163

Plot multiple views of the 3D volume on a surface
-------------------------------------------------

:func:`~nilearn.plotting.plot_img_on_surf` takes a statistical map and
projects it onto a surface. It supports multiple choices of orientations,
and can plot either one or both hemispheres. If no ``surf_mesh`` is given,
:func:`~nilearn.plotting.plot_img_on_surf` projects the images onto
`FreeSurfer <https://surfer.nmr.mgh.harvard.edu/>`_\'s fsaverage5.

.. GENERATED FROM PYTHON SOURCE LINES 163-170

.. code-block:: default


    plotting.plot_img_on_surf(stat_img,
                              views=['lateral', 'medial'],
                              hemispheres=['left', 'right'],
                              colorbar=True)
    plotting.show()


.. GENERATED FROM PYTHON SOURCE LINES 171-179

3D visualization in a web browser
---------------------------------

An alternative to :func:`nilearn.plotting.plot_surf_stat_map` is to use
:func:`nilearn.plotting.view_surf` or
:func:`nilearn.plotting.view_img_on_surf` that give more interactive
visualizations in a web browser. See :ref:`interactive-surface-plotting` for
more details.

.. GENERATED FROM PYTHON SOURCE LINES 179-187

.. code-block:: default


    view = plotting.view_surf(fsaverage.infl_right, texture, threshold='90%',
                              bg_map=fsaverage.sulc_right)

    # In a Jupyter notebook, if ``view`` is the output of a cell, it will
    # be displayed below the cell
    view


.. GENERATED FROM PYTHON SOURCE LINES 188-192

.. code-block:: default


    # uncomment this to open the plot in a web browser:
    # view.open_in_browser()


.. GENERATED FROM PYTHON SOURCE LINES 193-195

We don't need to do the projection ourselves, we can use
:func:`~nilearn.plotting.view_img_on_surf`:

.. GENERATED FROM PYTHON SOURCE LINES 195-201

.. code-block:: default


    view = plotting.view_img_on_surf(stat_img, threshold='90%')
    # view.open_in_browser()

    view


.. GENERATED FROM PYTHON SOURCE LINES 202-211

Impact of plot parameters on visualization
------------------------------------------

You can specify arguments to be passed on to the function
:func:`nilearn.surface.vol_to_surf` using `vol_to_surf_kwargs`. This allows
fine-grained control of how the input 3D image is resampled and interpolated -
for example if you are viewing a volumetric atlas, you would want to avoid
averaging the labels between neighboring regions. Using nearest-neighbor
interpolation with zero radius will achieve this.

.. GENERATED FROM PYTHON SOURCE LINES 211-223

.. code-block:: default


    destrieux = datasets.fetch_atlas_destrieux_2009(legacy_format=False)

    view = plotting.view_img_on_surf(
        destrieux.maps,
        surf_mesh="fsaverage",
        vol_to_surf_kwargs={"n_samples": 1, "radius": 0.0, "interpolation": "nearest"},
        symmetric_cmap=False,
    )

    # view.open_in_browser()
    view


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_01_plotting_plot_3d_map_to_surface_projection.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/01_plotting/plot_3d_map_to_surface_projection.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3d_map_to_surface_projection.py <plot_3d_map_to_surface_projection.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3d_map_to_surface_projection.ipynb <plot_3d_map_to_surface_projection.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
