
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/05_glm_second_level/plot_thresholding.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_05_glm_second_level_plot_thresholding.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_05_glm_second_level_plot_thresholding.py:


Statistical testing of a second-level analysis
==============================================

Perform a one-sample t-test on a bunch of images (a.k.a. second-level analysis
in fMRI) and threshold the resulting statistical map.

This example is based on the so-called localizer dataset.
It shows activation related to a mental computation task, as opposed to
narrative sentence reading/listening.

.. GENERATED FROM PYTHON SOURCE LINES 15-18

Prepare some images for a simple t test
----------------------------------------
This is a simple manually performed second level analysis.

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default

    from nilearn import datasets
    n_samples = 20
    localizer_dataset = datasets.fetch_localizer_calculation_task(
        n_subjects=n_samples, legacy_format=False
    )


.. GENERATED FROM PYTHON SOURCE LINES 25-26

Get the set of individual statstical maps (contrast estimates)

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    cmap_filenames = localizer_dataset.cmaps


.. GENERATED FROM PYTHON SOURCE LINES 29-34

Perform the second level analysis
----------------------------------

First, we define a design matrix for the model. As the model is trivial
(one-sample test), the design matrix is just one column with ones.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    import pandas as pd
    design_matrix = pd.DataFrame([1] * n_samples, columns=['intercept'])


.. GENERATED FROM PYTHON SOURCE LINES 38-39

Next, we specify and estimate the model.

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: default

    from nilearn.glm.second_level import SecondLevelModel
    second_level_model = SecondLevelModel().fit(
        cmap_filenames, design_matrix=design_matrix)


.. GENERATED FROM PYTHON SOURCE LINES 44-46

Compute the only possible contrast: the one-sample test. Since there
is only one possible contrast, we don't need to specify it in detail.

.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: default

    z_map = second_level_model.compute_contrast(output_type='z_score')


.. GENERATED FROM PYTHON SOURCE LINES 49-51

Threshold the resulting map without multiple comparisons correction,
abs(z) > 3.29 (equivalent to p < 0.001), cluster size > 10 voxels.

.. GENERATED FROM PYTHON SOURCE LINES 51-59

.. code-block:: default

    from nilearn.image import threshold_img
    thresholded_map = threshold_img(
        z_map,
        threshold=3.29,
        cluster_threshold=10,
        two_sided=True,
    )


.. GENERATED FROM PYTHON SOURCE LINES 60-62

This is equivalent to thresholding a z-statistic image with a
false positive rate < .001, cluster size > 10 voxels.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. code-block:: default

    from nilearn.glm import threshold_stats_img
    thresholded_map1, threshold1 = threshold_stats_img(
        z_map,
        alpha=.001,
        height_control='fpr',
        cluster_threshold=10,
        two_sided=True,
    )


.. GENERATED FROM PYTHON SOURCE LINES 72-73

Now use FDR <.05 (False Discovery Rate) and no cluster-level threshold.

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: default

    thresholded_map2, threshold2 = threshold_stats_img(
        z_map, alpha=.05, height_control='fdr')
    print('The FDR=.05 threshold is %.3g' % threshold2)


.. GENERATED FROM PYTHON SOURCE LINES 78-81

Now use FWER <.05 (Family-Wise Error Rate) and no cluster-level
threshold. As the data has not been intensively smoothed, we can
use a simple Bonferroni correction.

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: default

    thresholded_map3, threshold3 = threshold_stats_img(
        z_map, alpha=.05, height_control='bonferroni')
    print('The p<.05 Bonferroni-corrected threshold is %.3g' % threshold3)


.. GENERATED FROM PYTHON SOURCE LINES 86-90

Visualize the results
---------------------

First, the unthresholded map.

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    from nilearn import plotting
    display = plotting.plot_stat_map(z_map, title='Raw z map')


.. GENERATED FROM PYTHON SOURCE LINES 94-96

Second, the p<.001 uncorrected-thresholded map (with only clusters > 10
voxels).

.. GENERATED FROM PYTHON SOURCE LINES 96-100

.. code-block:: default

    plotting.plot_stat_map(
        thresholded_map1, cut_coords=display.cut_coords, threshold=threshold1,
        title='Thresholded z map, fpr <.001, clusters > 10 voxels')


.. GENERATED FROM PYTHON SOURCE LINES 101-102

Third, the fdr-thresholded map.

.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default

    plotting.plot_stat_map(thresholded_map2, cut_coords=display.cut_coords,
                           title='Thresholded z map, expected fdr = .05',
                           threshold=threshold2)


.. GENERATED FROM PYTHON SOURCE LINES 107-108

Fourth, the Bonferroni-thresholded map.

.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: default

    plotting.plot_stat_map(thresholded_map3, cut_coords=display.cut_coords,
                           title='Thresholded z map, expected fwer < .05',
                           threshold=threshold3)


.. GENERATED FROM PYTHON SOURCE LINES 113-119

These different thresholds correspond to different statistical
guarantees: in the FWER-corrected image there is only a
probability smaller than .05 of observing any false positive voxel. In the
FDR-corrected image, 5% of the voxels found are likely to be false
positive. In the uncorrected image, one expects a few tens of false
positive voxels.

.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: default


    plotting.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_05_glm_second_level_plot_thresholding.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/05_glm_second_level/plot_thresholding.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_thresholding.py <plot_thresholding.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_thresholding.ipynb <plot_thresholding.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
