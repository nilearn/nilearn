
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_adhd_dmn.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_04_glm_first_level_plot_adhd_dmn.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_adhd_dmn.py:

Default Mode Network extraction of ADHD dataset
===============================================

This example shows a full step-by-step workflow of fitting a GLM to data
extracted from a seed on the Posterior Cingulate Cortex and saving the results.

More specifically:

1. A sequence of fMRI volumes are loaded.
2. A design matrix with the Posterior Cingulate Cortex seed is defined.
3. A GLM is applied to the dataset (effect/covariance, then contrast estimation).
4. The Default Mode Network is displayed.

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 17-25

.. code-block:: default

    import numpy as np

    from nilearn import datasets, plotting
    from nilearn.maskers import NiftiSpheresMasker

    from nilearn.glm.first_level import FirstLevelModel
    from nilearn.glm.first_level import make_first_level_design_matrix


.. GENERATED FROM PYTHON SOURCE LINES 26-29

Prepare data and analysis parameters
-------------------------------------
Prepare the data.

.. GENERATED FROM PYTHON SOURCE LINES 29-39

.. code-block:: default

    adhd_dataset = datasets.fetch_adhd(n_subjects=1)

    # Prepare timing
    t_r = 2.
    slice_time_ref = 0.
    n_scans = 176

    # Prepare seed
    pcc_coords = (0, -53, 26)


.. GENERATED FROM PYTHON SOURCE LINES 40-43

Estimate contrasts
------------------
Specify the contrasts.

.. GENERATED FROM PYTHON SOURCE LINES 43-56

.. code-block:: default

    seed_masker = NiftiSpheresMasker([pcc_coords], radius=10, detrend=True,
                                     standardize=True, low_pass=0.1,
                                     high_pass=0.01, t_r=2.,
                                     memory='nilearn_cache',
                                     memory_level=1, verbose=0)
    seed_time_series = seed_masker.fit_transform(adhd_dataset.func[0])
    frametimes = np.linspace(0, (n_scans - 1) * t_r, n_scans)
    design_matrix = make_first_level_design_matrix(frametimes, hrf_model='spm',
                                                   add_regs=seed_time_series,
                                                   add_reg_names=["pcc_seed"])
    dmn_contrast = np.array([1] + [0] * (design_matrix.shape[1] - 1))
    contrasts = {'seed_based_glm': dmn_contrast}


.. GENERATED FROM PYTHON SOURCE LINES 57-60

Perform first level analysis
----------------------------
Setup and fit GLM.

.. GENERATED FROM PYTHON SOURCE LINES 60-64

.. code-block:: default

    first_level_model = FirstLevelModel(t_r=t_r, slice_time_ref=slice_time_ref)
    first_level_model = first_level_model.fit(run_imgs=adhd_dataset.func[0],
                                        design_matrices=design_matrix)


.. GENERATED FROM PYTHON SOURCE LINES 65-66

Estimate the contrast.

.. GENERATED FROM PYTHON SOURCE LINES 66-79

.. code-block:: default

    print('Contrast seed_based_glm computed.')
    z_map = first_level_model.compute_contrast(contrasts['seed_based_glm'],
                                               output_type='z_score')

    # Saving snapshots of the contrasts
    filename = 'dmn_z_map.png'
    display = plotting.plot_stat_map(z_map, threshold=3.0, title='Seed based GLM',
                                     cut_coords=pcc_coords)
    display.add_markers(marker_coords=[pcc_coords], marker_color='g',
                        marker_size=300)
    display.savefig(filename)
    print("Save z-map in '{0}'.".format(filename))


.. GENERATED FROM PYTHON SOURCE LINES 80-86

Generating a report
-------------------
It can be useful to quickly generate a
portable, ready-to-view report with most of the pertinent information.
This is easy to do if you have a fitted model and the list of contrasts,
which we do here.

.. GENERATED FROM PYTHON SOURCE LINES 86-97

.. code-block:: default


    from nilearn.reporting import make_glm_report

    report = make_glm_report(first_level_model,
                             contrasts=contrasts,
                             title='ADHD DMN Report',
                             cluster_threshold=15,
                             min_distance=8.,
                             plot_type='glass',
                             )


.. GENERATED FROM PYTHON SOURCE LINES 98-99

We have several ways to access the report:

.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. code-block:: default


    # report  # This report can be viewed in a notebook
    # report.save_as_html('report.html')
    # report.open_in_browser()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_adhd_dmn.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_adhd_dmn.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_adhd_dmn.py <plot_adhd_dmn.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_adhd_dmn.ipynb <plot_adhd_dmn.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
