
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_haxby_multiclass.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_02_decoding_plot_haxby_multiclass.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_haxby_multiclass.py:


The haxby dataset: different multi-class strategies
=======================================================

We compare one vs all and one vs one multi-class strategies: the overall
cross-validated accuracy and the confusion matrix.

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Load the Haxby data dataset
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-42

.. code-block:: default

    from nilearn import datasets
    import numpy as np
    import pandas as pd
    # By default 2nd subject from haxby datasets will be fetched.
    haxby_dataset = datasets.fetch_haxby()

    # Print basic information on the dataset
    print('Mask nifti images are located at: %s' % haxby_dataset.mask)
    print('Functional nifti images are located at: %s' % haxby_dataset.func[0])

    func_filename = haxby_dataset.func[0]
    mask_filename = haxby_dataset.mask

    # Load the behavioral data that we will predict
    labels = pd.read_csv(haxby_dataset.session_target[0], sep=" ")
    y = labels['labels']
    session = labels['chunks']

    # Remove the rest condition, it is not very interesting
    non_rest = (y != 'rest')
    y = y[non_rest]

    # Get the labels of the numerical conditions represented by the vector y
    unique_conditions, order = np.unique(y, return_index=True)
    # Sort the conditions by the order of appearance
    unique_conditions = unique_conditions[np.argsort(order)]


.. GENERATED FROM PYTHON SOURCE LINES 43-45

Prepare the fMRI data
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 45-56

.. code-block:: default

    from nilearn.maskers import NiftiMasker
    # For decoding, standardizing is often very important
    nifti_masker = NiftiMasker(mask_img=mask_filename, standardize=True,
                               runs=session, smoothing_fwhm=4,
                               memory="nilearn_cache", memory_level=1)
    X = nifti_masker.fit_transform(func_filename)

    # Remove the "rest" condition
    X = X[non_rest]
    session = session[non_rest]


.. GENERATED FROM PYTHON SOURCE LINES 57-61

Build the decoders, using scikit-learn
----------------------------------------
Here we use a Support Vector Classification, with a linear kernel,
and a simple feature selection step

.. GENERATED FROM PYTHON SOURCE LINES 61-77

.. code-block:: default


    from sklearn.svm import SVC
    from sklearn.feature_selection import SelectKBest, f_classif
    from sklearn.multiclass import OneVsOneClassifier, OneVsRestClassifier
    from sklearn.pipeline import Pipeline

    svc_ovo = OneVsOneClassifier(Pipeline([
        ('anova', SelectKBest(f_classif, k=500)),
        ('svc', SVC(kernel='linear'))
    ]))

    svc_ova = OneVsRestClassifier(Pipeline([
        ('anova', SelectKBest(f_classif, k=500)),
        ('svc', SVC(kernel='linear'))
    ]))


.. GENERATED FROM PYTHON SOURCE LINES 78-80

Now we compute cross-validation scores
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 80-89

.. code-block:: default

    from sklearn.model_selection import cross_val_score

    cv_scores_ovo = cross_val_score(svc_ovo, X, y, cv=5, verbose=1)

    cv_scores_ova = cross_val_score(svc_ova, X, y, cv=5, verbose=1)

    print('OvO:', cv_scores_ovo.mean())
    print('OvA:', cv_scores_ova.mean())


.. GENERATED FROM PYTHON SOURCE LINES 90-92

Plot barplots of the prediction scores
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: default

    from matplotlib import pyplot as plt
    plt.figure(figsize=(4, 3))
    plt.boxplot([cv_scores_ova, cv_scores_ovo])
    plt.xticks([1, 2], ['One vs All', 'One vs One'])
    plt.title('Prediction: accuracy score')


.. GENERATED FROM PYTHON SOURCE LINES 99-103

Plot a confusion matrix
------------------------
We fit on the first 10 sessions and plot a confusion matrix on the
last 2 sessions

.. GENERATED FROM PYTHON SOURCE LINES 103-121

.. code-block:: default

    from sklearn.metrics import confusion_matrix
    from nilearn.plotting import plot_matrix, show

    svc_ovo.fit(X[session < 10], y[session < 10])
    y_pred_ovo = svc_ovo.predict(X[session >= 10])

    plot_matrix(confusion_matrix(y_pred_ovo, y[session >= 10]),
                labels=unique_conditions,
                title='Confusion matrix: One vs One', cmap='hot_r')

    svc_ova.fit(X[session < 10], y[session < 10])
    y_pred_ova = svc_ova.predict(X[session >= 10])

    plot_matrix(confusion_matrix(y_pred_ova, y[session >= 10]),
                labels=unique_conditions,
                title='Confusion matrix: One vs All', cmap='hot_r')

    show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_haxby_multiclass.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_haxby_multiclass.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_haxby_multiclass.py <plot_haxby_multiclass.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_haxby_multiclass.ipynb <plot_haxby_multiclass.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
