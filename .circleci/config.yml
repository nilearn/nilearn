# quick-build rebuilds changes using the cached documentation.
# The cache is emptied everyday, forcing a full build on the day's first push.
# It doesn't operate on master branch. New branches are always built from scratch.
# full-build always rebuilds from scratch, without any cache. Only for changes in master branch.

version: 2.1

jobs:

  build_docs:
    
    docker:
      - image: circleci/python:3.7

    steps:
      - restore_cache:
          keys:
              - source-cache
      - checkout
      - run:
          name: Complete checkout
          command: |
              if ! git remote -v | grep upstream; then
                  git remote add upstream git://github.com/nilearn/nilearn.git
              fi
              git fetch upstream
      - save_cache:
          key: source-cache
          paths:
              - ".git"
      - run:
          name: Merge with upstream
          command: |
              echo $(git log -1 --pretty=%B) | tee gitlog.txt
              echo "gitlog.txt = $(cat gitlog.txt)"
              echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
              if [[ $(cat merge.txt) != "" ]]; then
                  echo "Merging $(cat merge.txt)";
                  git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              fi
      - restore_cache:
          keys:
              - pip-cache
      - run:
          name: Install dependencies
          command: |
              ./tools/circleci_dependencies.sh
      - save_cache:
          key: pip-cache
          paths:
              - ~/.cache/pip
      - save_cache:
          key: user-install-bin-cache
          paths:
              - ~/.local/lib/python3.7/site-packages
              - ~/.local/bin
      - run:
          name: Find build type
          command: |
              ./tools/circleci_build_type.sh
      - run:
          name: Verify build type
          command: |
              echo "PATTERN = $(cat pattern.txt)"
              echo "BUILD = $(cat build.txt)"
      - run:
          name: build doc
          command: |
              cd doc;
              PATTERN=$(cat ../pattern.txt) make $(cat ../build.txt)
          no_output_timeout: 7h
      - store_test_results:
          path: doc/_build/test-results
      - store_artifacts:
          path: doc/_build/test-results
          destination: test-results
      - store_artifacts:
          path: doc/_build/html/
          destination: dev
      - store_artifacts:
          path: doc/_build/html_stable
          destination: stable
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: doc/log.txt
      - persist_to_workspace:
          root: doc/_build
          paths:
              - html
              - html_stable


workflows:
  version: 2

  default:
    jobs:
      - build_docs:

  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_docs
