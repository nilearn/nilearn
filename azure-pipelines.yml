# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

jobs:


- job: 'run_tests_on_windows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
      Python39:
        python.version: '3.9'
      Python310:
        python.version: '3.10'
      Python311:
        python.version: '3.11'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  # Install the standard and testing-related dependencies
  # See pyproject.toml for dependency group options
  - script: |
      python -m pip install --upgrade pip
      pip install pytest-azurepipelines
      pip install --prefer-binary .[plotting,plotly,test]
    displayName: 'Install dependencies'

  # Running pytest from different directory avoids adding nilearn root repo to
  # sys.path, ensuring that the testing is run based on what's in the build
  # distribution.
  - script: |
      mkdir temp
      cd temp
      pytest --pyargs nilearn --cov-report=xml --cov=nilearn --cov-append --junitxml=test-results.xml
    displayName: 'test'

  # use the codecov uploader to upload the coverage report
  # https://docs.codecov.com/docs/codecov-uploader
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe
        .\codecov.exe -t ${CODECOV_TOKEN}
    displayName: 'codecov'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()


- job: 'test_installing_on_linux'
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      set -e
      python -m pip install --upgrade pip
      pip install --prefer-binary build
    displayName: 'Install dependencies for building Nilearn'

  - script: |
      set -e
      python -m build
    displayName: 'Build Nilearn'

  - script: |
      set -e
      pip install dist/nilearn-*-py3-none-any.whl
      python -c "import nilearn"
    displayName: 'Install Nilearn from wheel & check installation'


- job: 'test_installing_on_macos'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      set -e
      python -m pip install --upgrade pip
      pip install --prefer-binary build
    displayName: 'Install dependencies for building Nilearn'

  - script: |
      set -e
      python -m build
    displayName: 'Build Nilearn'

  - script: |
      set -e
      pip install dist/nilearn-*-py3-none-any.whl
      python -c "import nilearn"
    displayName: 'Install Nilearn from wheel & check installation'


- job: 'test_installing_on_windows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      :; set -o errexit
      python -m pip install --upgrade pip
      pip install --prefer-binary build
      python -m build
    displayName: 'Install dependencies for building Nilearn'

  - script: |
      :; set -o errexit
      python -m build
    displayName: 'Build Nilearn'

  - script: |
      :; set -o errexit
      forfiles /p dist /m nilearn-*-py3-none-any.whl /c "cmd /c pip install @file"
    displayName: 'Install binary distribution'

  - script: |
      :; set -o errexit
      python -c "import nilearn"
    displayName: 'Test that installation succeeded'


- job: 'test_expected_to_fail_installation_on_linux'
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python27:
        python.version: '2.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      set -e
      python -m pip install --upgrade pip
      pip install --prefer-binary build
    displayName: 'Install dependencies for building Nilearn'

  - script: |
      set -e
      python -m build
    displayName: 'Build Nilearn'

  - script: |
      set -e
      pip install dist/nilearn-*-py3-none-any.whl 2>&1 | grep "^ERROR"
    displayName: 'Attempt to install Nilearn from wheel (expected to fail)'
