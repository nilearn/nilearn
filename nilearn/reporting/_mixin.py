"""Module that provides mixin class to add reporting functionality to
estimators.
"""

import abc

from nilearn.reporting.html_report import generate_report


class ReportingMixin:
    """A mixin class to be used with classes that require reporting
    functionality.

    ReportingMixin uses one public attribute of type bool:

    reports: The value to indicate if reporting is enabled.

    ReportingMixin uses two private attributes of type dict:

    _report_content : The content to enrich the report. Some fields can be
    initialized in estimator constructor. Others can be added after model fit.
    Possible generic keys are:
        - title : title to be used for the report
        - description : description of the report generated by the estimator
        - summary : summary
        - warning_message : possible warning message
    _report_data : Contains data from model fit. If reporting is disabled, or
    the model is not fit, this attribute does not exist.

    Classes inheriting from ReportingMixin should implement ``_get_displays``
    to return the displays to be embedded to the report.
    """

    def has_report_data(self):
        """
        Check if the model is fitted and _reporting_data is populated.

        Returns
        -------
        bool
            True if reporting is enabled, the model is fitted and
        _reporting_data is populated; False otherwise.
        """
        return hasattr(self, "_reporting_data")

    def generate_report(self, title=None):
        """Generate an HTML report for the current object.

        Parameters
        ----------
        title : :obj:`str`, default=None
            title for the report. If None, title will be the class name.

        Returns
        -------
        report : `nilearn.reporting.html_report.HTMLReport`
            HTML report for the masker.
        """
        self._report_content["title"] = title
        return generate_report(self)

    def _reporting(self):
        # if report is disabled or the model is not yet fitted
        if not self.reports or not self.__sklearn_is_fitted__:
            self._report_content["summary"] = None
            return [None]
        return self._get_displays()

    @abc.abstractmethod
    def _get_displays(self):
        raise NotImplementedError()
