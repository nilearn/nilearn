environment:
  # There is no need to run the build for all the Python version /
  # architectures combo as the generated nilearn wheel is the same on all
  # platforms (universal wheel).
  # We run the tests on 2 different target platforms for testing purpose only.
  # We use miniconda versions of Python provided by appveyor windows images
  matrix:
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"

install:
  # Prepend miniconda installed Python to the PATH of this build
  # Add Library/bin directory to fix issue
  # https://github.com/conda/conda/issues/1753
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PYTHON%\\Library\\bin;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Installed prebuilt dependencies from conda
  # a temporary work around with failures related to matplotlib 2.1.0
  # See similar fix which made for travis and circleci
  # https://github.com/nilearn/nilearn/pull/1525
  # Should be removed after a new matplotlib release 2.1.1
  - "conda install pip numpy scipy scikit-learn joblib nose pytest wheel matplotlib -y -q"

  # Install other nilearn dependencies
  - "pip install nibabel coverage nose-timer pytest-cov"
  - "python setup.py bdist_wheel"
  - ps: "ls dist"

  # Install the generated wheel package to test it
  - "pip install --pre --no-index --find-links dist/ nilearn"

# Not a .NET project, we build in the install step instead
build: false

test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - "cd C:\\"
  - "pytest --pyargs nilearn -v"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
