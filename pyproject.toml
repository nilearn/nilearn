[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[project]
authors = [{name = "Nilearn developers"}]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]
dependencies = [
    "joblib>=1.2.0",
    "lxml",
    "nibabel>=5.2.0",
    "numpy>=1.22.4",
    "pandas>=2.2.0",
    "requests>=2.25.0",
    "scikit-learn>=1.4.0",
    "scipy>=1.8.0",
    "packaging"
]
description = "Statistical learning for neuroimaging in Python"
# Version from setuptools_scm
dynamic = ["version"]
license = {text = "new BSD"}
maintainers = [{name = "Bertrand Thirion", email = "bertrand.thirion@inria.fr"}]
name = "nilearn"
readme = "README.rst"
requires-python = ">=3.9"

[project.optional-dependencies]
# A combination of dependencies useful for developers
dev = [
    "nilearn[plotting,doc,style,test]"
]
# Requirements necessary for building the documentation
doc = [
    "nilearn[plotting]",
    "docutils>=0.17",
    "furo>=2024.8.6",
    "memory_profiler>=0.61.0",  # measuring memory during docs building
    "myst-parser>=3.0.1",
    "numpydoc>=1.8.0",
    "ruamel.yaml>=0.18.6",
    "sphinx>=7.4.7",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinx-gallery>=0.18.0",
    "sphinxcontrib-bibtex>=2.6.3",
    "sphinxext-opengraph>=0.9.1",
    "sphinxcontrib-mermaid>=1.0.0"
]
# the following is kept for "backward compatibility"
plotly = ["nilearn[plotting]"]
# Necessary req to use nilearn's plotting module
# Kaleido version is pinned for windows due to bug
# See https://github.com/plotly/Kaleido/issues/134 for more detail
plotting = [
    "matplotlib>=3.3.0",
    "plotly",
    "kaleido ; platform_system != 'Windows'",
    "kaleido==0.1.0.post1 ; platform_system == 'Windows'"
]
style = [
    'tox'
]
# For running unit and docstring tests
test = [
    "coverage",
    "pytest>=6.0.0",
    "pytest-cov",
    "pytest-randomly",
    "pytest-reporter-html1>=0.9.2",
    "pytest-xdist[psutil]",
    "pytest-csv",
    "pytest-timeout"
]

[project.urls]
Changelog = "https://nilearn.github.io/stable/changes/whats_new.html"
Development = "https://github.com/nilearn/nilearn"
Discussions = "https://neurostars.org/tag/nilearn"
Homepage = "https://nilearn.github.io"

[tool.codespell]
builtin = "clear,rare,en-GB_to_en-US"
ignore-words = ".github/codespell_ignore_words.txt"
skip = "./.git,*.cff,*.bib,*/tmp,plotly-gl3d-latest.min.js,jquery.min.js,localizer_behavioural.tsv,.mypy_cache,env,venv,./doc/auto_examples,./doc/modules/generated/*,./doc/_build,./maint_tools/*.html,./examples/*/results,AUTHORS.rst"

[tool.doc8]
allow-long-titles = true
ignore-path = [
    "*/changes/*.rst",
    "*/modules/generated/*",
    "*/modules/generated_reports/*",
    "*/templates/*.rst",
    "doc/authors.rst",
    "doc/includes/*",
    "doc/modules/datasets.rst",  # to ignore mystparser error
    "AUTHORS.rst"
]
max-line-length = 120

[tool.hatch.build.hooks.vcs]
version-file = "nilearn/_version.py"

[tool.hatch.build.targets.wheel]
exclude = ["nilearn/plotting/tests/baseline"]
packages = ["nilearn"]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
allow_redefinition = false
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude = [
    '.*/tests/test_.*',
    'doc/.*',
    'examples/.*',
    'maint_tools/.*',
    'nilearn_cache/.*',
    'nilearn/_version.py'
]
warn_unreachable = true

[[tool.mypy.overrides]]
ignore_errors = true
module = [
    "nilearn.externals.*",
    "nilearn._version"
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "IPython.*",
    "joblib.*",
    "kaleido",
    "matplotlib.*",
    "memory_profiler.*",
    "mpl_toolkits.*",
    "nibabel.*",
    "nilearn._version",
    "packaging.*",
    "plotly.*",
    "pytest.*",
    "rich.*",
    "scipy.*",
    "sklearn.*",
    "statsmodels.*",
    "svg.*"
]

[tool.pytest.ini_options]
addopts = "-ra --strict-config --strict-markers --doctest-modules --showlocals -s -vv --template=maint_tools/templates/index.html --timeout=60"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
junit_family = "xunit2"
log_cli_level = "INFO"
minversion = "6.0"
xfail_strict = true

[tool.ruff]
extend-exclude = [
    "nilearn/externals/*",
    "doc/auto_examples/*"
]
include = ["pyproject.toml", "nilearn/**/*.py", "examples/**/*.py", "maint_tools/**/*.py", "doc/**/*.py"]
indent-width = 4
line-length = 79

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
ignore = [
    "ARG005",
    "B904",
    "D105",
    "D205",
    "D208",
    "D301",
    "E741",
    "ERA001",
    "FURB105",
    "N803",
    "N806",
    "PERF203",
    "PIE790",
    "PLR2004",
    "PTH207",
    "UP038",  # https://github.com/astral-sh/ruff/issues/7871
    # Avoid linter rules conflicting with the formatter
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812",
    "COM819",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191"
]
# List of all the ruff rules (includes why the rule matters)
# https://docs.astral.sh/ruff/rules/
select = [
    "ARG",
    "B",
    "C4",
    "C90",
    "D",
    "E",
    "ERA",
    "F",
    "FLY",
    "FURB",
    "I",
    "N",
    "NPY",
    "PERF",
    "PIE",
    "PTH",
    "PD",
    "PGH",
    "PLR",
    "RUF",
    "SIM",
    "UP",
    "W"
]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 21

[tool.ruff.lint.per-file-ignores]
"**/{doc}/*" = ["D103"]
"**/{examples}/*" = ["B018", "D103", "D400", "E402"]
"__init__.py" = ["D104", "E402"]
"nilearn/**/tests/test_*" = ["D100"]
"nilearn/connectome/**/{tests}/*" = ["D103"]  # 35 errors to fix
"nilearn/datasets/tests/test_atlas.py" = ["D103"]
"nilearn/datasets/tests/test_func.py" = ["D103"]
"nilearn/datasets/tests/test_mocking_autoused.py" = ["D103"]
"nilearn/datasets/tests/test_neurovault.py" = ["D103"]
"nilearn/datasets/tests/test_struct.py" = ["D103"]
"nilearn/datasets/tests/test_testing.py" = ["D103"]
"nilearn/datasets/tests/test_utils.py" = ["D103"]
"nilearn/decoding/**/{tests}/*" = ["D103"]  # 81 errors to fix
"nilearn/decomposition/**/{tests}/*" = ["D103"]  # 32 errors to fix
"nilearn/glm/tests/test_check_events_file_uses_tab_separators.py" = ["D103"]
"nilearn/glm/tests/test_contrasts.py" = ["D103"]
"nilearn/glm/tests/test_design_matrix.py" = ["D103"]
"nilearn/glm/tests/test_hemodynamic_models.py" = ["D103"]
"nilearn/glm/tests/test_model.py" = ["D103"]
"nilearn/glm/tests/test_paradigm.py" = ["D103"]
"nilearn/glm/tests/test_regression.py" = ["D103"]
"nilearn/glm/tests/test_second_level.py" = ["D103"]
"nilearn/glm/tests/test_thresholding.py" = ["D103"]
"nilearn/glm/tests/test_utils.py" = ["D103"]
"nilearn/image/**/{tests}/*" = ["D103"]  # 75 errors to fix
"nilearn/plotting/*" = ["B028"]  # 18 errors to fix
"nilearn/plotting/**/{tests}/*" = ["D103"]  # 123 errors to fix
"nilearn/regions/**/{tests}/*" = ["D103"]  # 64 errors to fix
"nilearn/reporting/tests/test_glm_reporter.py" = ["D103"]
"nilearn/reporting/tests/test_html_report.py" = ["D103"]
"nilearn/reporting/tests/test_reporting.py" = ["D103"]
"nilearn/surface/**/{tests}/*" = ["D103"]  # 43 errors to fix

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-args
max-args = 27
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-branches
max-branches = 22
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-returns
max-returns = 7
# https://docs.astral.sh/ruff/settings/#lint_pylint_max-statements
max-statements = 93
