[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[project]
authors = [{name = "Nilearn developers"}]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11"
]
dependencies = [
    "joblib>=1.0.0",
    "lxml",
    "nibabel>=3.2.0",
    "numpy>=1.19.0",
    "pandas>=1.1.5",
    "requests>=2.25.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.6.0",
    "packaging"
]
description = "Statistical learning for neuroimaging in Python"
# Version from setuptools_scm
dynamic = ["version"]
license = {text = "new BSD"}
maintainers = [{name = "Bertrand Thirion", email = "bertrand.thirion@inria.fr"}]
name = "nilearn"
readme = "README.rst"
requires-python = ">=3.7"

[project.optional-dependencies]
# A combination of dependencies useful for developers
dev = [
    "nilearn[plotting,plotly,doc,test]",
    "isort",
    "flynt",
    "black",
    "blacken-docs",
    "flake8",
    "flake8-docstrings",
    "flake8-use-fstring",
    "flake8-functions",
    'codespell',
    'tomli',
    'pre-commit'
]
# Requirements necessary for building the documentation
doc = [
    "nilearn[plotly]",
    "furo",
    "memory_profiler",  # measuring memory during docs building
    "myst-parser",
    "numpydoc",
    "ruamel.yaml",
    "sphinx<7.2.0",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-gallery",
    "sphinxcontrib-bibtex",
    "sphinxext-opengraph"
]
# For testing of oldest usable versions of dependencies.
min = [
    "joblib==1.0.0",
    "nibabel==3.2.0",
    "numpy==1.19.0",
    "pandas==1.1.5",
    "scikit-learn==1.0.0",
    "scipy==1.6.0"
]
# For surface plotting mostly
plotly = ["kaleido", "plotly"]
# Necessary req to use nilearn's plotting module
plotmin = ["matplotlib==3.3.0"]
plotting = ["matplotlib>=3.3.0"]
# For running unit and docstring tests
test = [
    "coverage",
    "pytest>=6.0.0",
    "pytest-cov"
]

[project.urls]
Changelog = "https://nilearn.github.io/stable/changes/whats_new.html"
Development = "https://github.com/nilearn/nilearn"
Discussions = "https://neurostars.org/tag/nilearn"
Homepage = "https://nilearn.github.io"

[tool.black]
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = """
(
  nilearn/externals
  | nilearn/_utils/data_gen.py
  | nilearn/_utils/helpers.py
  | nilearn/reporting/html_report.py
  | nilearn/reporting/tests/test_html_report.py
  | examples/01_plotting/plot_3d_map_to_surface_projection.py
  | examples/01_plotting/plot_surf_atlas.py
  | examples/01_plotting/plot_surf_stat_map.py
  | examples/01_plotting/plot_surface_projection_strategies.py
  | examples/04_glm_first_level/plot_fiac_analysis.py
  | examples/04_glm_first_level/plot_fixed_effects.py
  | examples/04_glm_first_level/plot_localizer_surface_analysis.py
  | examples/07_advanced/plot_surface_bids_analysis.py
  | nilearn/interfaces/fmriprep/load_confounds_compcor.py
  | nilearn/interfaces/fmriprep/tests/test_load_confounds_utils.py
  | nilearn/interfaces/fmriprep/tests/test_load_confounds_strategy.py
  | nilearn/interfaces/fmriprep/tests/utils.py
  | nilearn/interfaces/fmriprep/tests/test_load_confounds.py
  | nilearn/maskers/nifti_spheres_masker.py
  | nilearn/maskers/nifti_labels_masker.py
  | nilearn/plotting/html_surface.py
  | nilearn/plotting/img_plotting.py
  | nilearn/plotting/js_plotting_utils.py
  | nilearn/plotting/surf_plotting.py
  | nilearn/plotting/tests/test_html_surface.py
  | nilearn/plotting/tests/test_surf_plotting.py
  | nilearn/surface/surface.py
  | nilearn/surface/tests/test_surface.py
)
"""
line-length = 79

[tool.codespell]
ignore-words = ".github/codespell_ignore_words.txt"
skip = "./.git,plotly-gl3d-latest.min.js,jquery.min.js,localizer_behavioural.tsv,.mypy_cache,env,venv,./doc/auto_examples,*/tmp,./doc/modules/generated/*,./doc/_build"

[tool.flynt]
exclude = "tempita"

[tool.hatch.build.hooks.vcs]
version-file = "nilearn/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["nilearn"]

[tool.hatch.version]
source = "vcs"

[tool.isort]
combine_as_imports = true
line_length = 79
profile = "black"
skip_gitignore = true
skip_glob = [
    "nilearn/externals/*",
    "doc/auto_examples/*"
]
src_paths = [
    'maint_tools',
    'nilearn',
    'doc'
]

[tool.pytest.ini_options]
addopts = "-ra --strict-config --strict-markers --doctest-modules -s -vv --durations=0"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
# TODO: Remove filter in release 0.13
filterwarnings = "ignore:.*Please use 'zscore_sample' instead.:FutureWarning"
junit_family = "xunit2"
minversion = "6.0"
xfail_strict = true
