;  See https://tox.wiki/en
[tox]
requires =
    tox>=4
; run lint by default when just calling "tox"
env_list = lint

; ENVIRONMENTS
; ------------
[style]
description = common environment for style checkers (rely on pre-commit hooks)
skip_install = true
deps =
    pre-commit
    flake8
    flake8-functions

[min]
description = environment with minimum versions of all dependencies (plotting not included)
skip_install = false
deps =
    joblib==1.0.0
    nibabel==3.2.0
    numpy==1.19.0
    pandas==1.1.5
    scikit-learn==1.0.0
    scipy==1.6.0

[plotmin]
description = environment with minimum matplotlib version
skip_install = false
deps =
    matplotlib==3.3.0

[matplotlib]
description = environment with matplotlib dependencies
skip_install = false
deps =
    matplotlib>=3.3.0

[plotting]
description = environment with all plotting dependencies
skip_install = false
deps =
    {[matplotlib]deps}
    kaleido
    plotly
    kaleido ; platform_system != 'Windows'
    kaleido==0.1.0.post1 ; platform_system == 'Windows'


; COMMANDS
; --------
[testenv:lint]
description = run all linters and formatters
skip_install = true
deps =
    {[style]deps}
commands =
	pre-commit run --all-files --show-diff-on-failure {posargs:}
    ; TODO add this to pre-commit or remove when all functions have been shortened.
    flake8 --select CFQ001 --max-function-length 181 nilearn/**/tests

[testenv:flake8]
description = run flake8
skip_install = true
deps =
    {[style]deps}
commands =
    pre-commit run --all-files --show-diff-on-failure flake8
    ; TODO add this to pre-commit or remove when all functions have been shortened.
    flake8 --select CFQ001 --max-function-length 181 nilearn/**/tests

[testenv:test_latest]
description = run tests on latest version of all dependencies (plotting not included)
passenv = USERNAME
extras = test
commands =
    pytest --cov=nilearn --cov-report=xml {posargs:}

[testenv:test_plotting]
description = run tests on latest version of all dependencies
passenv = USERNAME
extras = test
deps =
    {[plotting]deps}
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_doc]
description = run tests on doc
passenv = USERNAME
extras = test
deps =
    {[plotting]deps}
commands =
	pytest doc/_additional_doctests.txt
    ; TODO find a way to rely on globbing instead of listing a specific folder
	pytest --doctest-glob='*.rst' doc/manipulating_images/

[testenv:test_pre]
description = run test_latest and test_doc on pre-release version of all dependencies
passenv =
    USERNAME
    WARN_DEPRECATION_ERRORS
pip_pre = true
extras = test
deps =
    {[plotting]deps}
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_min]
description = run tests on minimum version of all dependencies (plotting not included)
passenv = USERNAME
extras = test
deps =
    {[min]deps}
commands =
    {[testenv:test_latest]commands}

[testenv:test_plot_min]
description = run tests on minimum version of all dependencies (no plotly).
              Plotly is additional for supporting interactive plots
              but is not actually needed to use nilearn plotting functionality
passenv = USERNAME
extras = test
deps =
    {[min]deps}
    {[plotmin]deps}
commands =
    {[testenv:test_latest]commands}

[testenv:test_randomize]
description = run all tests in a random order
passenv = USERNAME
extras = test
deps =
    {[plotting]deps}
    pytest-random-order
commands =
    pytest --pyargs nilearn --random-order {posargs:}
