;  See https://tox.wiki/en/4.23.2/
[tox]
requires =
    tox>=4
; run lint by default when just calling "tox"
env_list = lint

; ENVIRONMENTS
; ------------
[style]
description = common environment for style checkers (rely on pre-commit hooks)
skip_install = true
deps =
    pre-commit

[min]
description = environment with minimum versions of all dependencies (plotting not included)
skip_install = false
deps =
    joblib==1.2.0
    nibabel==5.2.0
    numpy==1.22.4
    pandas==2.2.0
    scikit-learn==1.4.0
    scipy==1.8.0

[plotmin]
description = environment with minimum matplotlib version
skip_install = false
deps =
    matplotlib==3.3.0

[matplotlib]
description = environment with matplotlib dependencies
skip_install = false
deps =
    matplotlib>=3.3.0

[plotting]
description = environment with all plotting dependencies
skip_install = false
deps =
    {[matplotlib]deps}
    kaleido
    plotly
    kaleido ; platform_system != 'Windows'
    kaleido==0.1.0.post1 ; platform_system == 'Windows'

[global_var]
passenv =
    USERNAME
    # Pass user color preferences through
    PY_COLORS
    FORCE_COLOR
    NO_COLOR
    CLICOLOR
    CLICOLOR_FORCE

; COMMANDS
; --------
[testenv:lint]
description = run all linters and formatters
skip_install = true
deps =
    {[style]deps}
commands =
	pre-commit run --all-files --show-diff-on-failure {posargs:}

[testenv:prettier]
description = run prettier to check formatting html and css
skip_install = true
deps =
    {[style]deps}
commands =
    pre-commit run --all-files --show-diff-on-failure prettier

[testenv:test_latest]
description = run tests on latest version of all dependencies (plotting not included)
passenv = {[global_var]passenv}
extras = test
commands =
    pytest --cov=nilearn --cov-report=xml --report=report.html -n auto {posargs:}

[testenv:test_plotting]
description = run tests on latest version of all dependencies
passenv = {[global_var]passenv}
extras = test
deps =
    {[plotting]deps}
    rich
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_doc]
description = run tests on doc
passenv = {[global_var]passenv}
extras = test
deps =
    {[plotting]deps}
commands =
	pytest -n auto doc/_additional_doctests.txt --report=report_doc.html
    ; TODO find a way to rely on globbing instead of listing a specific folder
	pytest -n auto --doctest-glob='*.rst' doc/manipulating_images/  --report=report_doc.html

[testenv:test_pre]
description = run test_latest and test_doc on pre-release version of all dependencies
passenv = {[global_var]passenv}
pip_pre = true
extras = test
deps =
    {[plotting]deps}
    pyarrow
    rich
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_min]
description = run tests on minimum version of all dependencies (plotting not included)
passenv = {[global_var]passenv}
extras = test
deps =
    {[min]deps}
commands =
    {[testenv:test_latest]commands}

[testenv:test_plot_min]
description = run tests on minimum version of all dependencies (no plotly).
              Plotly is additional for supporting interactive plots
              but is not actually needed to use nilearn plotting functionality
passenv = {[global_var]passenv}
extras = test
deps =
    {[min]deps}
    {[plotmin]deps}
commands =
    {[testenv:test_latest]commands}

[testenv:test_nightly]
description = run tests on nightly build version of all dependencies
passenv = {[global_var]passenv}
setenv =
    nightlies_url=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
extras = test
deps =
    {[plotting]deps}
    pyarrow
    rich
; recreating the environment to avoid dependency conflict when not starting from a clean slate
recreate = true
commands =
    pip install git+https://github.com/nipy/nibabel
    pip install --pre --upgrade -i {env:nightlies_url} pandas scipy scikit-learn matplotlib
    pip install --pre --upgrade -i {env:nightlies_url} numpy
    pytest -n auto --report=report.html {posargs:}

[testenv:doc]
description = build doc with minimum supported version of python and all dependencies (plotting included).
base_python = 3.9
extras = doc
deps =
    {[min]deps}
    {[plotmin]deps}
    rich
    plotly
    kaleido
    pyarrow
passenv =
    {[global_var]passenv}
    PATTERN
    VERSIONTAG
allowlist_externals =
    make
commands =
    make -C doc clean
    ; Update the authors file and the names file
    ; in case a contributor has been added to citation.cff
    ; but did not run the maint_tools/citation_cff_maint.py script.
    python maint_tools/citation_cff_maint.py
	make -C doc {posargs:}


[testenv:linkcheck]
description = check links in doc
extras = doc
passenv =
    {[global_var]passenv}
allowlist_externals =
    make
    git
commands =
    git fetch --tags
    make -C doc clean
    ; Update the authors file and the names file
    ; in case a contributor has been added to citation.cff
    ; but did not run the maint_tools/citation_cff_maint.py script.
    python maint_tools/citation_cff_maint.py
	make -C doc linkcheck
