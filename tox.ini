[tox]
requires =
    tox>=4
env_list = lint

[style]
description = common environment for style checkers
skip_install = true
deps =
    isort
    black
    blacken-docs
    flake8
    flake8-docstrings
    flake8-use-fstring
    flake8-functions
    codespell
    tomli

[test]
description = base environment for testing
skip_install = false
deps =
    coverage
    pytest>=6.0.0
    pytest-cov

[min]
description = environment with minimum versions of all dependencies (plotting not included)
skip_install = false
deps =
    joblib==1.0.0
    nibabel==3.2.0
    numpy==1.19.0
    pandas==1.1.5
    scikit-learn==1.0.0
    scipy==1.6.0

[plotmin]
description = environment with minimum matplotlib version
skip_install = false
deps =
    matplotlib==3.3.0

[matplotlib]
description = environment with matplotlib dependencies
skip_install = false
deps =
    matplotlib>=3.3.0

[plotly]
description = environment with plotly dependencies
skip_install = false
deps =
    {[matplotlib]deps}
    kaleido
    plotly

[testenv:flake8]
description = run flake8
skip_install = true
deps =
    {[style]deps}
commands =
    flake8 --config .flake8 --verbose nilearn examples maint_tools
    ; check maximum function length in tests
    flake8 nilearn/**/tests --select CFQ001 --max-function-length 181

[testenv:lint]
description = run all linters and formatters
skip_install = true
deps =
    {[style]deps}
commands =
	isort --profile black --settings-path pyproject.toml nilearn examples maint_tools
	black --config pyproject.toml nilearn examples maint_tools
	{[testenv:flake8]commands}
	codespell --toml pyproject.toml

[testenv:test_latest]
description = run tests on latest version of all dependencies (plotting not included)
deps =
    {[test]deps}
commands =
	python -m pytest --pyargs nilearn --cov=nilearn

[testenv:test_plotting]
description = run tests on latest version of all dependencies
deps =
    {[plotly]deps}
    {[test]deps}
commands =
	{[testenv:test_latest]commands}

[testenv:test_doc]
description = run tests on doc
deps =
    {[testenv:test_plotting]deps}
commands =
	python -m pytest --doctest-glob='*.rst' ./doc/**/*.rst
	python -m pytest ./doc/_additional_doctests.txt

[testenv:test_pre]
description = run tests and test-doc on pre-release version of all dependencies
pip_pre = true
deps =
    {[plotly]deps}
    {[test]deps}
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_min]
description = run tests on minimum version of all dependencies (plotting not included)
deps =
    {[min]deps}
    {[test]deps}
commands =
	python -m pytest --pyargs nilearn

[testenv:test_plot_min]
description = run tests on minimum version of all dependencies (no plotly)
deps =
    {[min]deps}
    {[plotmin]deps}
    {[test]deps}
commands =
	python -m pytest --pyargs nilearn

[testenv:test_randomize]
description = run all tests in a random order
deps =
    {[plotly]deps}
    {[test]deps}
    pytest-random-order
commands =
	python -m pytest --pyargs nilearn --random-order
