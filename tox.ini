;  See https://tox.wiki/en
[tox]
requires =
    tox>=4
; run lint by default when just calling "tox"
env_list = lint

; ENVIRONMENTS
; ------------
[style]
description = common environment for style checkers (rely on pre-commit hooks)
skip_install = true
deps =
    pre-commit
    flake8
    flake8-functions

[min]
description = environment with minimum versions of all dependencies (plotting not included)
skip_install = false
deps =
    joblib==1.0.0
    nibabel==3.2.0
    numpy==1.19.0
    pandas==1.1.5
    scikit-learn==1.0.0
    scipy==1.6.0

[plotmin]
description = environment with minimum matplotlib version
skip_install = false
deps = matplotlib==3.3.0

[matplotlib]
description = environment with matplotlib dependencies
skip_install = false
deps = matplotlib>=3.3.0

[plotting]
description = environment with all plotting dependencies
skip_install = false
deps =
    {[matplotlib]deps}
    kaleido
    plotly


; COMMANDS
; --------
[testenv:lint]
description = run all linters and formatters
skip_install = true
deps = {[style]deps}
commands =
	pre-commit run --all-files --show-diff-on-failure {posargs:}
    flake8 --select CFQ001 --max-function-length 181 nilearn/**/tests

[testenv:flake8]
description = run flake8
skip_install = true
deps = {[style]deps}
commands =
    pre-commit run --all-files --show-diff-on-failure flake8
    flake8 --select CFQ001 --max-function-length 181 nilearn/**/tests

[testenv:test_latest]
description = run tests on latest version of all dependencies (plotting not included)
extras = test
commands = python -m pytest --pyargs nilearn --cov=nilearn

[testenv:test_plotting]
description = run tests on latest version of all dependencies
extras = test
deps = {[plotting]deps}
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_doc]
description = run tests on doc
extras = test
deps = {[plotting]deps}
commands =
	python -m pytest doc/_additional_doctests.txt
    ; TODO find a way to rely on globbing instead of listing a specific folder
	python -m pytest --doctest-glob='*.rst' doc/manipulating_images/

[testenv:test_pre]
description = run tests and test-doc on pre-release version of all dependencies
pip_pre = true
extras = test
deps = {[plotting]deps}
commands =
	{[testenv:test_latest]commands}
    {[testenv:test_doc]commands}

[testenv:test_min]
description = run tests on minimum version of all dependencies (plotting not included)
extras = test
deps = {[min]deps}
commands = python -m pytest --pyargs nilearn

[testenv:test_plot_min]
description = run tests on minimum version of all dependencies (no plotly)
extras = test
deps =
    {[min]deps}
    {[plotmin]deps}
commands = python -m pytest --pyargs nilearn

[testenv:test_randomize]
description = run all tests in a random order
extras = test
deps =
    {[plotting]deps}
    pytest-random-order
commands = python -m pytest --pyargs nilearn --random-order
